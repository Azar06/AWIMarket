{
    "swagger": "2.0",
    "info": {
        "description": "Describe how to use AWIMarket REST API\n",
        "version": "1.0.0",
        "title": "AWIMARKET REST API",
        "contact": {
            "name": "mehdi.chamouma@gmail.com, nassim.vachor@gmail.com, arnaud.zaragoza@gmail.com"
        }
    },
    "schemes": [
        "http"
    ],
    "paths": {
        "/users/": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "The list of all users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UserPreview"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserBase"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "the user created",
                        "schema": {
                            "$ref": "#/definitions/UserPreview"
                        }
                    }
                }
            }
        },
        "/users/{user_id}": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Get user by user name",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "user_id",
                        "description": "The user id that needs to be fetched.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "user"
                ],
                "summary": "Updated user",
                "description": "This can only be done by the logged in user.",
                "operationId": "updateUser",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "user_id",
                        "description": "user_id that need to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Updated user object",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "203": {
                        "description": "User updated"
                    },
                    "400": {
                        "description": "Invalid user supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "user"
                ],
                "summary": "Delete user",
                "description": "This can only be done by the logged in user.",
                "operationId": "deleteUser",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "user_id",
                        "description": "The user id that needs to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User deleted"
                    },
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/journals/{journal_id}": {
            "get": {
                "description": "Get the journal",
                "parameters": [
                    {
                        "in": "path",
                        "name": "journal_id",
                        "type": "string",
                        "format": "string",
                        "required": true,
                        "description": "journal id to fetch"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The journal fetched"
                    }
                }
            },
            "put": {
                "description": "Update journal informations",
                "parameters": [
                    {
                        "in": "path",
                        "name": "journal_id",
                        "type": "string",
                        "format": "string",
                        "required": true,
                        "description": "journal id to update"
                    }
                ],
                "responses": {
                    "203": {
                        "description": "Journal has been updated"
                    }
                }
            },
            "delete": {
                "description": "Delete a journal",
                "parameters": [
                    {
                        "in": "path",
                        "name": "journal_id",
                        "type": "string",
                        "format": "string",
                        "required": true,
                        "description": "journal id to be deleted"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Journal has been deleted"
                    }
                }
            }
        },
        "/journals": {
            "get": {
                "description": "Get the user journals",
                "responses": {
                    "200": {
                        "description": "The journal list"
                    }
                }
            },
            "post": {
                "description": "Create a journal",
                "responses": {
                    "201": {
                        "description": "Journal created"
                    }
                }
            }
        },
        "/journals/{journal_id}/entries": {
            "post": {
                "description": "Create a journal entry",
                "parameters": [
                    {
                        "in": "path",
                        "name": "journal_id",
                        "type": "string",
                        "format": "string",
                        "required": true,
                        "description": "journal id to add the entry"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Journal created"
                    }
                }
            }
        },
        "/journals/{journal_id}/entries/{entry_id}": {
            "delete": {
                "description": "Create a journal entry",
                "parameters": [
                    {
                        "in": "path",
                        "name": "journal_id",
                        "type": "string",
                        "format": "string",
                        "required": true,
                        "description": "id of the concerned journal"
                    },
                    {
                        "in": "path",
                        "name": "entry_id",
                        "type": "string",
                        "format": "string",
                        "required": true,
                        "description": "Id of the entry to delete"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Journal created"
                    }
                }
            }
        },
        "/journals/{journal_id}/comments": {
            "post": {
                "description": "Create a journal entry",
                "parameters": [
                    {
                        "in": "path",
                        "name": "journal_id",
                        "type": "string",
                        "format": "string",
                        "required": true,
                        "description": "journal id to add the comment"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Comment created"
                    }
                }
            }
        },
        "/journals/{journal_id}/comments/{comment_id}": {
            "delete": {
                "description": "Delete a journal comment",
                "parameters": [
                    {
                        "in": "path",
                        "name": "journal_id",
                        "type": "string",
                        "format": "string",
                        "required": true,
                        "description": "id of the concerned journal"
                    },
                    {
                        "in": "path",
                        "name": "comment_id",
                        "type": "string",
                        "format": "string",
                        "required": true,
                        "description": "Id of the comment to delete"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Comment deleted"
                    }
                }
            }
        },
        "/products": {
            "get": {
                "parameters": [
                    {
                        "in": "query",
                        "name": "keyword",
                        "type": "string",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list of products"
                    }
                }
            },
            "post": {
                "description": "create a new product",
                "responses": {
                    "200": {
                        "description": "Product created"
                    }
                }
            }
        },
        "/products/{product_id}": {
            "put": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "product_id",
                        "type": "string",
                        "format": "string",
                        "required": true,
                        "description": "id of the product to update"
                    }
                ],
                "summary": "update a product",
                "description": "update a product",
                "responses": {
                    "200": {
                        "description": "Product updated"
                    }
                }
            },
            "delete": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "product_id",
                        "type": "string",
                        "format": "string",
                        "required": true,
                        "description": "id of the product to delete"
                    }
                ],
                "summary": "Delete a product",
                "description": "Delete a product",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/companies": {
            "get": {
                "description": "Fetch the companies",
                "responses": {
                    "200": {
                        "description": "list of the companies"
                    }
                }
            },
            "post": {
                "description": "Create a company",
                "responses": {
                    "200": {
                        "description": "Company has been created"
                    },
                    "403": {
                        "description": "Can't create a new company. Maximum number of companies per user is one"
                    }
                }
            }
        },
        "/companies/{company_id}": {
            "get": {
                "description": "Fetch the company",
                "parameters": [
                    {
                        "in": "path",
                        "name": "company_id",
                        "type": "string",
                        "format": "string",
                        "required": true,
                        "description": "id of the concerned journal"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Company informations"
                    }
                }
            },
            "put": {
                "description": "Update the company",
                "parameters": [
                    {
                        "in": "path",
                        "name": "company_id",
                        "type": "string",
                        "format": "string",
                        "required": true,
                        "description": "id of the concerned journal"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Company informations"
                    }
                }
            }
        },
        "/companies/{company_id}/products": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "company_id",
                        "type": "string",
                        "format": "string",
                        "required": true,
                        "description": "the company identifier"
                    }
                ],
                "summary": "Get a company products",
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                }
            }
        },
        "/companies/{company_id}/orders": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "company_id",
                        "type": "string",
                        "format": "string",
                        "required": true,
                        "description": "The company identifier of the orders"
                    }
                ],
                "summary": "Get a company orders",
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                }
            }
        },
        "/orders": {
            "get": {
                "summary": "Get orders",
                "description": "Get all orders\nblabla\n",
                "parameters": [
                    {
                        "in": "query",
                        "name": "type",
                        "type": "string",
                        "format": "string",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/orders/{order_id}": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "order_id",
                        "type": "string",
                        "format": "string",
                        "required": true
                    }
                ],
                "summary": "Get an order summary",
                "description": "Get an order summary",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "order_id",
                        "type": "string",
                        "format": "string",
                        "required": true
                    }
                ],
                "summary": "Update an order",
                "description": "Update an order",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/orders/{order_id}/products/{product_id}": {
            "put": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "order_id",
                        "type": "string",
                        "format": "string",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "product_id",
                        "type": "string",
                        "format": "string",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "description": "abc",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "description": "the new status",
                                    "type": "string",
                                    "format": "string"
                                }
                            }
                        }
                    }
                ],
                "summary": "Update an order product",
                "description": "Used to change the product selling status",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/orders/{order_id}/payment": {
            "post": {
                "summary": "Pay the order",
                "description": "Pay the order",
                "parameters": [
                    {
                        "in": "path",
                        "name": "order_id",
                        "type": "string",
                        "format": "string",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "403": {
                        "description": "User is not the owner of the ressource or the order is already paied"
                    }
                }
            }
        },
        "/pets/findByStatus": {
            "get": {
                "tags": [
                    "pet"
                ],
                "summary": "Finds Pets by status",
                "description": "Multiple status values can be provided with comma seperated strings",
                "operationId": "findPetsByStatus",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "status",
                        "description": "Status values that need to be considered for filter",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Pet"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write_pets",
                            "read_pets"
                        ]
                    }
                ]
            }
        },
        "/pets/findByTags": {
            "get": {
                "tags": [
                    "pet"
                ],
                "summary": "Finds Pets by tags",
                "description": "Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.",
                "operationId": "findPetsByTags",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "tags",
                        "description": "Tags to filter by",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Pet"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid tag value"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write_pets",
                            "read_pets"
                        ]
                    }
                ]
            }
        },
        "/pets/{petId}": {
            "get": {
                "tags": [
                    "pet"
                ],
                "summary": "Find pet by ID",
                "description": "Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions",
                "operationId": "getPetById",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "petId",
                        "description": "ID of pet that needs to be fetched",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    },
                    {
                        "petstore_auth": [
                            "write_pets",
                            "read_pets"
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "pet"
                ],
                "summary": "Updates a pet in the store with form data",
                "description": "",
                "operationId": "updatePetWithForm",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "petId",
                        "description": "ID of pet that needs to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "name": "name",
                        "description": "Updated name of the pet",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "formData",
                        "name": "status",
                        "description": "Updated status of the pet",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write_pets",
                            "read_pets"
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "pet"
                ],
                "summary": "Deletes a pet",
                "description": "",
                "operationId": "deletePet",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "header",
                        "name": "api_key",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "petId",
                        "description": "Pet id to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid pet value"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write_pets",
                            "read_pets"
                        ]
                    }
                ]
            }
        },
        "/stores/order": {
            "post": {
                "tags": [
                    "store"
                ],
                "summary": "Place an order for a pet",
                "description": "",
                "operationId": "placeOrder",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "order placed for purchasing the pet",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    },
                    "400": {
                        "description": "Invalid Order"
                    }
                }
            }
        },
        "/stores/order/{orderId}": {
            "get": {
                "tags": [
                    "store"
                ],
                "summary": "Find purchase order by ID",
                "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",
                "operationId": "getOrderById",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "orderId",
                        "description": "ID of pet that needs to be fetched",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "store"
                ],
                "summary": "Delete purchase order by ID",
                "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
                "operationId": "deleteOrder",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "orderId",
                        "description": "ID of the order that needs to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        },
        "/users": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Create user",
                "description": "This can only be done by the logged in user.",
                "operationId": "createUser",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Created user object",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/users/createWithArray": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Creates list of users with given input array",
                "description": "",
                "operationId": "createUsersWithArrayInput",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "List of user object",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/users/createWithList": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Creates list of users with given input array",
                "description": "",
                "operationId": "createUsersWithListInput",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "List of user object",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/users/login": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Logs user into the system",
                "description": "",
                "operationId": "loginUser",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "username",
                        "description": "The user name for login",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "password",
                        "description": "The password for login in clear text",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid username/password supplied"
                    }
                }
            }
        },
        "/users/logout": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Logs out current logged in user session",
                "description": "",
                "operationId": "logoutUser",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "api_key": {
            "type": "apiKey",
            "name": "api_key",
            "in": "header"
        },
        "petstore_auth": {
            "type": "oauth2",
            "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
            "flow": "implicit",
            "scopes": {
                "write_pets": "modify pets in your account",
                "read_pets": "read your pets"
            }
        }
    },
    "definitions": {
        "UserBase": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "username": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "userStatus": {
                    "type": "integer",
                    "format": "int32",
                    "description": "User Status"
                }
            }
        },
        "UserPreview": {
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/UserBase"
                }
            ]
        },
        "User": {
            "allOf": [
                {
                    "$ref": "#/definitions/UserPreview"
                },
                {
                    "properties": {
                        "journals": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/JournalPreview"
                            }
                        }
                    }
                }
            ]
        },
        "JournalBase": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string",
                    "format": "string"
                }
            }
        },
        "JournalPreview": {
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/JournalBase"
                },
                {
                    "properties": {
                        "a": {
                            "type": "string"
                        }
                    }
                }
            ]
        },
        "Category": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "Pet": {
            "type": "object",
            "required": [
                "name",
                "photoUrls"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "category": {
                    "$ref": "#/definitions/Category"
                },
                "name": {
                    "type": "string",
                    "example": "doggie"
                },
                "photoUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Tag"
                    }
                },
                "status": {
                    "type": "string",
                    "description": "pet status in the store"
                }
            }
        },
        "Tag": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "Order": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "petId": {
                    "type": "integer",
                    "format": "int64"
                },
                "quantity": {
                    "type": "integer",
                    "format": "int32"
                },
                "shipDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "status": {
                    "type": "string",
                    "description": "Order Status"
                },
                "complete": {
                    "type": "boolean"
                }
            }
        }
    }
}
